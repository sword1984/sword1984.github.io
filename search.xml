<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BurpSuite破解安装</title>
    <url>/2020/07/11/burpsuite-install/</url>
    <content><![CDATA[<h2 id="Burpsuite简介"><a href="#Burpsuite简介" class="headerlink" title="Burpsuite简介"></a>Burpsuite简介</h2><p>BurpSuite 是用于攻击web应用程序的集成平台。它包含了许多工具，并为这些工具设计了许多接口，以促进加快攻击应用程序的过程。</p>
<p>所有的工具都共享一个能处理并显示 HTTP 消息，持久性，认证，代{过}{滤}理，日志，警报的一个强大的可扩展的框架。</p>
<ul>
<li>拦截代{过}{滤}理（Proxy），你可以检查和更改浏览器与目标应用程序间的流量；</li>
<li>可感知应用程序的网络爬虫（Spider），它能完整的枚举应用程序的内容和功能；</li>
<li>高级扫描器，执行后它能自动地发现web应用程序的安全漏洞；<span id="more"></span></li>
<li>入侵测试工具（Intruder），用于执行强大的定制攻击去发现及利用不同寻常的漏洞；</li>
<li>重放工具（Repeater），一个靠手动操作来触发单独的HTTP 请求，并分析应用程序响应的工具；</li>
<li>会话工具（Sequencer），用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具；</li>
<li>解码器，进行手动执行或对应用程序数据者智能解码编码的工具；</li>
<li>扩展性强，可以让你加载Burp Suite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能。</li>
</ul>
<img src="https://github.com/guluding/Images/blob/master/burpsuite_install_0.png?raw=true" style="zoom:65%;" />
安装环境为 WINDOW10

<h2 id="安装-java"><a href="#安装-java" class="headerlink" title="安装 java"></a>安装 java</h2><p>因为 burpsuite 是在 java 环境下运行的，所以首先应该配置好 java 环境</p>
<ol>
<li><p>安装 jdk-9_windows-x64 ，</p>
<p>下载链接:  <a href="https://drive.google.com/file/d/11lamt-WgSOwWzacJS-2eHNYgdkcrZEV0/view?usp=sharing">https://drive.google.com/file/d/11lamt-WgSOwWzacJS-2eHNYgdkcrZEV0/view?usp=sharing</a></p>
<p><a href="https://pan.baidu.com/s/1QK1P2bnoUpcwh84p6artCg">https://pan.baidu.com/s/1QK1P2bnoUpcwh84p6artCg</a> 密码：h0ei</p>
</li>
<li><p>点击<strong>下一步</strong>。</p>
</li>
</ol>
<p><img src="https://github.com/guluding/Images/blob/master/java_install_0.png?raw=true"></p>
<p><img src="https://github.com/guluding/Images/blob/master/java_install_1.png?raw=true"></p>
<p><img src="https://github.com/guluding/Images/blob/master/java_install_2.png?raw=true"></p>
<ol start="3">
<li><p>打开 powershell 检查 java 是否安装完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java --version</span><br><span class="line">java 9</span><br><span class="line">Java(TM) SE Runtime Environment (build 9+181)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装破解burpsuite"><a href="#安装破解burpsuite" class="headerlink" title="安装破解burpsuite"></a>安装破解burpsuite</h2><p>burpsuite下载地址：<a href="https://drive.google.com/file/d/1lmNpoVKE-sbtM4ImVfcPy00fiQz6EPrK/view?usp=sharing">https://drive.google.com/file/d/1lmNpoVKE-sbtM4ImVfcPy00fiQz6EPrK/view?usp=sharing</a> </p>
<p><a href="https://pan.baidu.com/s/1nzS390Idqjo88gjreI9m3g">https://pan.baidu.com/s/1nzS390Idqjo88gjreI9m3g</a> 密码：7hr9</p>
<p>2019.9.2更新版本</p>
<p><a href="https://pan.baidu.com/s/19TdSAkAvPlmYSfad7O5bWA">https://pan.baidu.com/s/19TdSAkAvPlmYSfad7O5bWA</a> 密码：0vnv</p>
<ol>
<li>双击 burp-loader-keygen-2020_2 运行程序</li>
</ol>
<p><img src="https://github.com/guluding/Images/blob/master/burpsuite_install_1.png?raw=true"></p>
<ol start="2">
<li>修改License Text文本中的内容为任意字符串</li>
</ol>
<p><img src="https://github.com/guluding/Images/blob/master/burpsuite_install_2.png?raw=true"></p>
<ol start="3">
<li>双击 Burp_start_chs</li>
</ol>
<p><img src="https://github.com/guluding/Images/blob/master/burpsuite_install_3.png?raw=true"></p>
<ol start="4">
<li>将 keygen 中的 License 复制到弹出的 burpsuite 窗口中，点击<strong>Next</strong>按钮</li>
</ol>
<p><img src="https://github.com/guluding/Images/blob/master/burpsuite_install_4.png?raw=true"></p>
<ol start="5">
<li>点击<strong>手动激活</strong>按钮</li>
</ol>
<p><img src="https://github.com/guluding/Images/blob/master/burpsuite_install_5.png?raw=true"></p>
<ol start="6">
<li>将复制请求复制到上面Activation Requests 对话框里，再将Activation Response里的复制到下面的对话框里，点击<strong>下一步</strong>。</li>
</ol>
<p><img src="https://github.com/guluding/Images/blob/master/burpsuite_install_6.png?raw=true"></p>
<ol start="7">
<li>看到如下提示，说明激活成功了。</li>
</ol>
<p><img src="https://github.com/guluding/Images/blob/master/burpsuite_install_7.png?raw=true"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p>吾爱破解：<a href="https://www.52pojie.cn/thread-1194411-1-1.html">https://www.52pojie.cn/thread-1194411-1-1.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>NetworkSecurity</category>
      </categories>
      <tags>
        <tag>burpsuite</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建和备份</title>
    <url>/2020/07/01/hexo-backup/</url>
    <content><![CDATA[<p>由于更换电脑和系统造成博客没有持续进行下去，所以要解决在不同电脑维护、配置、找回博客内容。</p>
<p>总结得到以下两种方法：</p>
<ol>
<li>通过 GIT 使用不同分支存储不同的内容<ul>
<li>生成静态网页</li>
<li>整个驱动程序</li>
</ul>
</li>
<li>通过 onedrive 同步 <span id="more"></span></li>
</ol>
<h2 id="Hexo-搭建"><a href="#Hexo-搭建" class="headerlink" title="Hexo 搭建"></a>Hexo 搭建</h2><h3 id="安装-GIT"><a href="#安装-GIT" class="headerlink" title="安装 GIT"></a><a href="https://git-scm.com/book/en/v2">安装 GIT</a></h3><p>git <a href="https://git-scm.com/downloads">下载地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>



<h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Ubuntu system</span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure>



<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a><a href="https://hexo.io/">安装 Hexo</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># install hexo</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"># initiallzation</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line"># Install related plug-ins</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>



<h2 id="Hexo-备份"><a href="#Hexo-备份" class="headerlink" title="Hexo 备份"></a>Hexo 备份</h2><h3 id="使用-OneDrive"><a href="#使用-OneDrive" class="headerlink" title="使用 OneDrive"></a>使用 OneDrive</h3><p>如果你需要更换系统或设备, 只需同步 OneDrive 后, 安装<code>git</code> <code>node</code> <code>npm</code> <code>hexo</code> 以及进入目录安装相关插件 <code>npm install </code>,最好使用 Linux 系统,我个人是在 Win10 安装碰到各种坑</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm配置github</title>
    <url>/2020/07/18/pycharm-git/</url>
    <content><![CDATA[<p><strong>配置环境前提：</strong></p>
<ol>
<li><p>安装git，<a href="https://git-scm.com/downloads">下载链接</a></p>
</li>
<li><p>git-ssh配置，<a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5">教程</a></p>
</li>
<li><p>安装pycharm，下载地址：链接：<a href="https://pan.baidu.com/s/1SkY4nATX92-SYQZwBBxZCw">https://pan.baidu.com/s/1SkY4nATX92-SYQZwBBxZCw</a><br>提取码：v47x <span id="more"></span></p>
</li>
</ol>
<h2 id="设置git"><a href="#设置git" class="headerlink" title="设置git"></a>设置git</h2><p>File -&gt; Settings -&gt; Version Control -&gt; Git</p>
<p><img src="https://github.com/guluding/Images/blob/master/pycharm_git_00.png?raw=true"></p>
<p>一般情况下，git目录会自动识别</p>
<h2 id="设置github"><a href="#设置github" class="headerlink" title="设置github"></a>设置github</h2><p>File -&gt; Settings -&gt; Version Control -&gt; GitHub</p>
<p><img src="https://github.com/guluding/Images/blob/master/pycharm_git_01.png?raw=true"></p>
<h2 id="上传项目到github"><a href="#上传项目到github" class="headerlink" title="上传项目到github"></a>上传项目到github</h2><p><img src="https://github.com/guluding/Images/blob/master/pycharm_git_03.png?raw=true"></p>
<p><img src="https://github.com/guluding/Images/blob/master/pycharm_git_04.png?raw=true"></p>
<p><img src="https://github.com/guluding/Images/blob/master/pycharm_git_05.png?raw=true"></p>
<p>上传成功后在 Pycharm 右下方会提示 Successfully shared project on GitHub</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p><a href="https://blog.csdn.net/qq_35203425/article/details/78561039">pycharm环境下将python项目提交到github</a></p>
<p><a href="https://git-scm.com/book/en/v2">Git Documentation</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多线程</title>
    <url>/2020/06/28/python-thread/</url>
    <content><![CDATA[<h2 id="Python多线程简介"><a href="#Python多线程简介" class="headerlink" title="Python多线程简介"></a>Python多线程简介</h2><ul>
<li>一个应用程序最少有一个进程，而一个进程有一个或多个线程</li>
<li>Python提供两个线程标准库 <code> _thread</code>  和 <code>threading</code></li>
<li>Python适用于I/O密集型，涉及到网络、磁盘I/O的任务，不适用于计算密集型任务</li>
</ul>
<span id="more"></span>

<h2 id="Python多线程实例"><a href="#Python多线程实例" class="headerlink" title="Python多线程实例"></a>Python多线程实例</h2><h3 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h3><h4 id="通过继承-Thread-类"><a href="#通过继承-Thread-类" class="headerlink" title="通过继承 Thread 类"></a>通过继承 Thread 类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, thread_name</span>):</span></span><br><span class="line">        <span class="comment"># call the parent class&#x27;s implementation for __init__</span></span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__(name=thread_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is running...&quot;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        MyThread(<span class="string">&quot;thread &#123;&#125; &quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i))).start()</span><br></pre></td></tr></table></figure>



<h4 id="实例化threading-Thread对象"><a href="#实例化threading-Thread对象" class="headerlink" title="实例化threading.Thread对象"></a>实例化<code>threading.Thread</code>对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">arg</span>):</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;thread &#123;&#125; is running&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(arg)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=(i,))</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>



<h3 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h3><h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h4><p>Python多线程在执行过程中，每个线程各执行各的任务，不等待其它的线程，自顾自的完成自己的任务</p>
<p>如果我们希望主线程等子线程完成后再继续执行主线程，就需要调用 <code>join()</code> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start run:&#x27;</span>, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;stop run&#x27;</span>, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>))</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=run)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)       <span class="comment"># 等待子线程启动</span></span><br><span class="line">t.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;end code&#x27;</span>, time.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h4 id="setDaemon-方法"><a href="#setDaemon-方法" class="headerlink" title="setDaemon()方法"></a>setDaemon()方法</h4><p>我们可以把<strong>子线程设置成主线程的守护线程</strong>，就是当主线程结束后，守护线程也会结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread().getName(), <span class="string">&#x27;is working&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(threading.current_thread().getName(), <span class="string">&#x27;is finish&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=run, daemon=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># Run setDaemon() before the child thread become daemon thread</span></span><br><span class="line">        <span class="comment"># t.setDaemon(True)</span></span><br><span class="line">        t.start()</span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Main thread is over&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; threads are alive&#x27;</span>.<span class="built_in">format</span>(threading.active_count()))</span><br></pre></td></tr></table></figure>



<h3 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h3><p>由于线程之间的任务执行是CPU进行随机调度的，并且每个线程可能只执行了n条指令之后就被切换到别的线程了</p>
<p>当多个线程同时操作一个对象，如果没有很好地保护该对象，会造成程序结果的不可预期，这被称为“线程不安全”</p>
<p>为了保证数据安全，Python 设计了<strong>线程锁，即同一时刻只允许一个线程操作该数据</strong></p>
<p>线程锁用于锁定资源，可以同时使用多个锁</p>
<p>先看看没有线程锁时，数据发生的错乱</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">balance = <span class="number">0</span>     <span class="comment"># If this is your balance from bank</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">    t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(balance)</span><br></pre></td></tr></table></figure>

<p>结果并不等于0，可以明显看出数据发生错乱，你当然不愿意你的银行余额变成负数吧</p>
<h4 id="互斥锁Lock"><a href="#互斥锁Lock" class="headerlink" title="互斥锁Lock"></a>互斥锁Lock</h4><p>如果我们要确保 <code>balance</code> 计算正确，就要给 <code>change_it()</code> 上一把锁，当某个线程开始执行 <code>change_it()</code> 时，我们说，该线程因为获得了锁，因此其他线程不能同时执行 <code>change_it()</code> ，只能等待，直到锁被释放后，获得该锁以后才能改</p>
<p>由于锁只有一个，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突</p>
<p>创建一个锁就是通过 <code>threading.Lock()</code> 来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            change_it(n)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">    t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    <span class="built_in">print</span>(balance)</span><br></pre></td></tr></table></figure>

<h4 id="信号Semaphore"><a href="#信号Semaphore" class="headerlink" title="信号Semaphore"></a>信号Semaphore</h4><p><code>semaphore</code> 是一个内置的计数器,每当调用 <code>acquire()</code> 时</p>
<p>内置计数器 -1,每当调用release()时，内置计数器 +1,计数器不能小于<strong>0</strong></p>
<p>当计数器为<strong>0</strong>时，<code>acquire()</code> 将阻塞线程直到其他线程调用 <code>release()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>,time.ctime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        t = threading.Thread(target=run, args=())</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br><span class="line">ok Wed Jun 17 16:41:26 2020</span><br></pre></td></tr></table></figure>

<p>可以看到，程序会在很短的时间内生成20个线程来打印一句话</p>
<p>如果在主机执行<strong>IO密集型任务</strong>的时候再执行这种类型的程序时，计算机就有很大可能会宕机。<br>这时候就可以为这段程序添加一个计数器功能，来限制一个时间点内的线程数量。</p>
<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">s1 = threading.Semaphore(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    s1.acquire()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>, time.ctime())</span><br><span class="line">    s1.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        t1 = threading.Thread(target=run, args=())</span><br><span class="line">        t1.start()</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:41 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:43 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:45 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br><span class="line">ok Wed Jun 17 16:48:47 2020</span><br></pre></td></tr></table></figure>

<h4 id="事件Event"><a href="#事件Event" class="headerlink" title="事件Event"></a>事件Event</h4><p>事件线程锁的运行机制：全局定义了一个 <code>Flag</code>，如果 <code>Flag</code> 的值为 <code>False</code>，那么当程序执行 <code>wait()</code> 方法时就会阻塞，如果 <code>Flag</code> 值为 <code>True</code>，线程不再阻塞。这种锁，类似交通红绿灯（默认是红灯），它属于在红灯的时候一次性阻挡所有线程，在绿灯的时候，<strong>一次性放行所有</strong>排队中的线程。</p>
<ul>
<li><p><code>clear()</code> 方法会将事件的 <code>Flag</code> 设置为 <code>False</code></p>
</li>
<li><p><code>set()</code> 方法会将 <code>Flag</code> 设置为 <code>True</code></p>
</li>
<li><p><code>wait()</code> 方法将等待“红绿灯”信号</p>
</li>
<li><p><code>is_set()</code> 判断当前是否”绿灯放行”状态</p>
</li>
</ul>
<p>下面是一个模拟红绿灯，然后汽车通行的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">event = threading.Event()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lighter</span>():</span></span><br><span class="line">    green_time = <span class="number">5</span></span><br><span class="line">    red_time = <span class="number">5</span></span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nThe green light ...&#x27;</span>)</span><br><span class="line">        time.sleep(green_time)</span><br><span class="line">        event.clear()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nThe red light ...&#x27;</span>)</span><br><span class="line">        time.sleep(red_time)</span><br><span class="line">        event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;The &#123;&#125; roared past&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;The &#123;&#125; arrives, sees the red light and stops&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">            event.wait()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;The &#123;&#125; drove off at the green light&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    light = threading.Thread(target=lighter,)</span><br><span class="line">    light.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">&#x27;Mercedes&#x27;</span>, <span class="string">&#x27;BMW&#x27;</span>, <span class="string">&#x27;Audi&#x27;</span>]:</span><br><span class="line">        car = threading.Thread(target=run, args=(name,))</span><br><span class="line">        car.start()</span><br></pre></td></tr></table></figure>

<h4 id="条件Condition"><a href="#条件Condition" class="headerlink" title="条件Condition"></a>条件Condition</h4><p><code>Condition</code> 称作条件锁，依然是通过 <code>acquire()/release()</code> 加锁解锁</p>
<ul>
<li><p><code>wait([timeout])</code> 方法将使线程进入 <code>Condition</code> 的等待池等待通知，并释放锁。使用前线程必须已获得锁定，否则将抛出异常</p>
</li>
<li><p><code>notify()</code> 方法将从等待池挑选一个线程并通知，收到通知的线程将自动调用 <code>acquire()</code> 尝试获得锁定（进入锁定池），其他线程仍然在等待池中。调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常</p>
</li>
<li><p><code>notifyAll()</code> 方法将通知等待池中所有的线程，这些线程都将进入锁定池尝试获得锁定，调用这个方法不会释放锁定。使用前线程必须已获得锁定，否则将抛出异常</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">number = <span class="number">0</span></span><br><span class="line">con = threading.Condition()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, action</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Foo, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">        self.action = action</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">global</span> number</span><br><span class="line">        con.acquire()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is running...&quot;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.action == <span class="string">&quot;add&quot;</span>:</span><br><span class="line">                number += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> self.action == <span class="string">&#x27;reduce&#x27;</span>:</span><br><span class="line">                number -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                exit(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;number = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(number))</span><br><span class="line"></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> number == <span class="number">5</span> <span class="keyword">or</span> number == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is pause&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line">                con.notify()</span><br><span class="line">                con.wait()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; is reruning&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line">        con.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = Foo(<span class="string">&quot;thread1&quot;</span>, <span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">    b = Foo(<span class="string">&quot;thread2&quot;</span>, <span class="string">&#x27;reduce&#x27;</span>)</span><br><span class="line">    a.start()</span><br><span class="line">    b.start()</span><br></pre></td></tr></table></figure>



<h4 id="定时器Timer"><a href="#定时器Timer" class="headerlink" title="定时器Timer"></a>定时器Timer</h4><p>定时器 <code>Timer</code> 类是 <code>threading</code> 模块中的一个小工具，用于指定n秒后执行某操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Timer(<span class="number">1</span>, hello)  <span class="comment"># One second later</span></span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>



<h4 id="with语句使用线程锁"><a href="#with语句使用线程锁" class="headerlink" title="with语句使用线程锁"></a>with语句使用线程锁</h4><p>在一些“老的” Python 代码中，显式获取和释放锁是很常见的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedCounter</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    A counter object that can be shared by multiple threads.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    _lock = threading.RLock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, initial_value = <span class="number">0</span></span>):</span></span><br><span class="line">        self._value = initial_value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span>(<span class="params">self,delta=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Increment the counter with locking</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> SharedCounter._lock:</span><br><span class="line">            self._value += delta</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decr</span>(<span class="params">self,delta=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Decrement the counter with locking</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> SharedCounter._lock:</span><br><span class="line">             self.incr(-delta)</span><br></pre></td></tr></table></figure>

<p><code>Lock</code> 对象和 <code>with</code> 语句块一起使用可以保证互斥执行，就是每次只有一个线程可以执行 <code>with</code> 语句包含的代码块。<code>with</code> 语句会在这个代码块执行前自动获取锁，在执行结束后自动释放锁</p>
<p>相比于上面显式调用的方法，**<code>with</code> 语句更加优雅，也更不容易出错**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedCounter</span>:</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    A counter object that can be shared by multiple threads.</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, initial_value = <span class="number">0</span></span>):</span></span><br><span class="line">        self._value = initial_value</span><br><span class="line">        self._value_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span>(<span class="params">self,delta=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Increment the counter with locking</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> self._value_lock:</span><br><span class="line">             self._value += delta</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decr</span>(<span class="params">self,delta=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        Decrement the counter with locking</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> self._value_lock:</span><br><span class="line">             self._value -= delta</span><br></pre></td></tr></table></figure>

<p>[^]: </p>
<p>参考资料:</p>
<blockquote>
<p>刘江的博客教程        <a href="https://www.liujiangblog.com/course/python/79">https://www.liujiangblog.com/course/python/79</a></p>
<p>廖雪峰的官方网站    <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017629247922688">https://www.liaoxuefeng.com/wiki/1016959663602400/1017629247922688</a></p>
<p>Python cookbook    <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p04_locking_critical_sections.html">https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p04_locking_critical_sections.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>threads</tag>
      </tags>
  </entry>
  <entry>
    <title>python正则表达式基础篇</title>
    <url>/2021/05/05/python-re/</url>
    <content><![CDATA[<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>有少数特殊的字符我们称之为元字符（metacharacter），它们并不能匹配自身，它们定义了字符类、子组匹配和模式重复次数等<span id="more"></span></p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[]</td>
<td align="center">匹配的字符的集合</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">脱字符号</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">后面跟元字符去除特殊功能，跟普通字符实现特殊功能</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配除了换行符以外的任何字符</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">指定前一个字符匹配零次或者多次</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">指定前一个字符匹配一次期或者多次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">指定前一个字符匹配零次或一次</td>
</tr>
<tr>
<td align="center">{}</td>
<td align="center">指定前一个字符必须匹配 m 到 n 次之间</td>
</tr>
</tbody></table>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>下边列举一些反斜杠加字符构成的特殊含义：</p>
<table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td>匹配任何十进制数字；相当于类 [0-9]</td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配任何非十进制数字的字符；相当于类 [^0-9]</td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配任何空白字符(包含空格、换行、制表符等)；相当于类 [\t\n\r\f\v]</td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配任何非空白字符；相当于类 [^\t\n\r\f\v]</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配任何单词字符；相当于类 [a-zA-Z0-9_]</td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配任何非单词字符；相当于类 [^a-zA-Z0-9_]</td>
</tr>
<tr>
<td align="center">\b</td>
<td>匹配单词的开始或结束</td>
</tr>
<tr>
<td align="center">\B</td>
<td>与 \b 相反</td>
</tr>
</tbody></table>
<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><p>正则表达式被编译为模式对象，该对象拥有各种方法供你操作字符串，如查找模式匹配或者执行字符替换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.<span class="built_in">compile</span>(<span class="string">&#x27;ab*&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">re.<span class="built_in">compile</span>(<span class="string">&#x27;ab*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>re.compile() 也可以接受 flags 参数，用于开启各种特殊功能和语法变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.<span class="built_in">compile</span>(<span class="string">&#x27;ab*&#x27;</span>, re.IGNORECASE)</span><br></pre></td></tr></table></figure>

<h3 id="实行匹配"><a href="#实行匹配" class="headerlink" title="实行匹配"></a>实行匹配</h3><p>当你将正则表达式编译之后，你就得到一个模式对象。那你拿他可以用来做什么呢？模式对象拥有很多方法和属性，我们下边列举最重要的几个来讲：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">match()</td>
<td>判断一个正则表达式是否从开始处匹配一个字符串</td>
</tr>
<tr>
<td align="center">search()</td>
<td>遍历字符串，找到正则表达式匹配的第一个位置</td>
</tr>
<tr>
<td align="center">findall()</td>
<td>遍历字符串，找到正则表达式匹配的所有位置，并以列表的形式返回</td>
</tr>
<tr>
<td align="center">finditer()</td>
<td>遍历字符串，找到正则表达式匹配的所有位置，并以迭代器的形式返回</td>
</tr>
</tbody></table>
<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = re.<span class="built_in">compile</span>(<span class="string">&#x27;[a-z]+&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">re.<span class="built_in">compile</span>(<span class="string">&#x27;[a-z]+&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.match(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment"># 因为 + 表示匹配一次或者多次，所以空字符串不能被匹配，因此，match()返回 None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(p.match(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = p.match(<span class="string">&#x27;swordc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">6</span>), match=<span class="string">&#x27;swordc&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p> 在这个例子中，match() 返回一个匹配对象，我们将其存放在变量 m 中，以便日后使用。</p>
<p>接下来让我们来看看匹配对象里边有哪些信息吧。匹配对象包含了很多方法和属性，以下几个是最重要的：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">group()</td>
<td>返回匹配的字符串</td>
</tr>
<tr>
<td align="center">start()</td>
<td>返回匹配的开始位置</td>
</tr>
<tr>
<td align="center">end()</td>
<td>返回匹配的结束位置</td>
</tr>
<tr>
<td align="center">span()</td>
<td>返回一个元组表示匹配位置(开始，结束)</td>
</tr>
</tbody></table>
<h3 id="模块级别的函数"><a href="#模块级别的函数" class="headerlink" title="模块级别的函数"></a>模块级别的函数</h3><p>使用正则表达式也并非一定要创建模式对象，然后调用它的匹配方法。因为，re 模块同时还提供了一些全局函数，例如 match()，search()，findall()，sub() 等等。这些函数的第一个参数是正则表达式字符串，其他参数跟模式对象同名的方法采用一样的参数；返回值也一样，同样是返回 None 或者匹配对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(re.match(<span class="string">r&#x27;From\s+&#x27;</span>, <span class="string">&#x27;From_FishC.com&#x27;</span>))</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r&#x27;From\s+&#x27;</span>, <span class="string">&#x27;From FishC.com&#x27;</span>)</span><br><span class="line">&lt;_sre.SRE_Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">5</span>), match=<span class="string">&#x27;From &#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="编译标志"><a href="#编译标志" class="headerlink" title="编译标志"></a>编译标志</h2><table>
<thead>
<tr>
<th>标志</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>ASCII,A</td>
<td>使得转义符号如\w \b \s和\d 只能匹配 ASCII 字符</td>
</tr>
<tr>
<td>DOTALL,S</td>
<td>使得 . 匹配任何符号，包括换行符</td>
</tr>
<tr>
<td>IGNORECASE,I</td>
<td>匹配的时候不区分大小写</td>
</tr>
<tr>
<td>LOCALE,L</td>
<td>支持当前的语言(区域)设置</td>
</tr>
<tr>
<td>MULTILINE,M</td>
<td>多行匹配，影响 ^ 和 $</td>
</tr>
<tr>
<td>VERBOSE,X(for ‘extended’)</td>
<td>启用详细的正则表达式</td>
</tr>
</tbody></table>
<p>下面我们来详细讲解一下它们的含义：</p>
<h3 id="A-ASCII"><a href="#A-ASCII" class="headerlink" title="A    ASCII"></a>A    ASCII</h3><p>使得 \w，\W，\b，\B，\s 和 \S 只匹配 ASCII 字符，而不匹配完整的 Unicode 字符。这个标志仅对 Unicode 模式有意义，并忽略字节模式。</p>
<h3 id="S-DOTALL"><a href="#S-DOTALL" class="headerlink" title="S    DOTALL"></a>S    DOTALL</h3><p>使得 . 可以匹配任何字符，包括换行符。如果不使用这个标志，. 将匹配除了换行符的所有字符。</p>
<h3 id="I-IGNORECASE"><a href="#I-IGNORECASE" class="headerlink" title="I    IGNORECASE"></a>I    IGNORECASE</h3><p>字符类和文本字符串在匹配的时候不区分大小写。举个例子，正则表达式 [A-Z] 也将会匹配对应的小写字母，像 FishC 可以匹配 FishC，fishc 或 FISHC 等。如果你不设置 LOCALE，则不会考虑语言（区域）设置这方面的大小写问题。</p>
<h3 id="L-LOCALE"><a href="#L-LOCALE" class="headerlink" title="L    LOCALE"></a>L    LOCALE</h3><p>使得 \w，\W，\b 和 \B 依赖当前的语言（区域）环境，而不是 Unicode 数据库。</p>
<p>区域设置是 C 语言的一个功能，主要作用是消除不同语言之间的差异。例如你正在处理的是法文文本，你想使用 \w+ 来匹配单词，但是 \w 只是匹配 [A-Za-z] 中的单词，并不会匹配 ‘é’ 或 ‘&amp;#231;’。如果你的系统正确的设置了法语区域环境，那么 C 语言的函数就会告诉程序 ‘é’ 或 ‘&amp;#231;’ 也应该被认为是一个字符。当编译正则表达式的时候设置了 LOCALE 的标志，\w+ 就可以识别法文了，但速度多少会受到影响。</p>
<h3 id="M-MULTILINE"><a href="#M-MULTILINE" class="headerlink" title="M MULTILINE"></a>M MULTILINE</h3><p>通常 ^ 只匹配字符串的开头，而 $ 则匹配字符串的结尾。当这个标志被设置的时候，^ 不仅匹配字符串的开头，还匹配每一行的行首；&amp; 不仅匹配字符串的结尾，还匹配每一行的行尾。</p>
<h3 id="X-VERBOSE"><a href="#X-VERBOSE" class="headerlink" title="X    VERBOSE"></a>X    VERBOSE</h3><p>这个标志使你的正则表达式可以写得更好看和更有条理，因为使用了这个标志，空格会被忽略（除了出现在字符类中和使用反斜杠转义的空格）；这个标志同时允许你在正则表达式字符串中使用注释，# 符号后边的内容是注释，不会递交给匹配引擎（除了出现在字符类中和使用反斜杠转义的 #）。</p>
<p>下边是使用 re.VERBOSE 的例子，大家看下正则表达式的可读性是不是提高了不少：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">charref = re.<span class="built_in">compile</span>(<span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> &amp;[#]                # 开始数字引用</span></span><br><span class="line"><span class="string"> (</span></span><br><span class="line"><span class="string">     0[0-7]+         # 八进制格式</span></span><br><span class="line"><span class="string">   | [0-9]+          # 十进制格式</span></span><br><span class="line"><span class="string">   | x[0-9a-fA-F]+   # 十六进制格式</span></span><br><span class="line"><span class="string"> )</span></span><br><span class="line"><span class="string"> ;                   # 结尾分号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>, re.VERBOSE)</span><br></pre></td></tr></table></figure>

<p>如果没有设置 VERBOSE 标志，那么同样的正则表达式会写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">charref = re.<span class="built_in">compile</span>(<span class="string">&quot;&amp;#(0[0-7]+|[0-9]+|x[0-9a-fA-F]+);&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>哪个可读性更加？相信大家心里有底了。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基础操作</title>
    <url>/2020/07/08/git-commands/</url>
    <content><![CDATA[<p>本文针对初级用户，从最简单的讲起，但是需要读者对 <code>git</code> 基本用法有所了解。</p>
<h2 id="Git-基本概念"><a href="#Git-基本概念" class="headerlink" title="Git 基本概念"></a>Git 基本概念</h2><p>我们先来理解下 Git 工作区、暂存区和版本库概念</p>
<ul>
<li><strong>工作区</strong>：就是人在电脑里能看到的目录</li>
<li><strong>暂存区</strong>：英文叫 stage，或 index。一般存放在 “.git目录” 下的 index 文件(.git/index)中，所以我们把暂存区有时也叫作索引(index)。</li>
<li><strong>版本库</strong>：工作区有一个隐藏目录 .git，这个不算工作区，而是 Git 的版本库。</li>
</ul>
 <span id="more"></span>

<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系。</p>
<p><img src="https://github.com/guluding/Images/blob/master/git_diagram.jpg?raw=true"></p>
<p>图中的 objects 标识的区域为 Git 的对象库，实际位于 <code>.git/objects</code> 目录下，里面包含了创建的各种对象及内容。</p>
<h2 id="Git-基本操作"><a href="#Git-基本操作" class="headerlink" title="Git 基本操作"></a>Git 基本操作</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>用 <code>git init</code> 在目录中创建新的 Git 仓库，你可以在任何时候、任何目录中这么做，完全是本地化的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir guluding</span><br><span class="line">$ cd guluding&#x2F;</span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in &#x2F;home&#x2F;cj&#x2F;guluding&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>



<h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p><code>git add</code> 命令可将该文件添加到缓存，如我们添加以下两个文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ touch README</span><br><span class="line">$ touch hello.py</span><br><span class="line">$ git status -s</span><br><span class="line">?? README</span><br><span class="line">?? hello.py</span><br></pre></td></tr></table></figure>

<p><code>git status</code> 命令用于查看项目的当前状态。</p>
<p>接下来我们执行 <code>git add</code> 命令来添加文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add README hello.py</span><br></pre></td></tr></table></figure>

<p>现在我们再执行 <code>git status</code> ，就可以看到这两个文件已经加上去了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.py</span><br></pre></td></tr></table></figure>

<p>新项目中，添加所有文件很普遍，我们可以使用 <code>git add .</code> 命令来添加当前项目的所有文件。</p>
<p>现在我们修改 README 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim README</span><br></pre></td></tr></table></figure>

<p>在 README 添加任意内容后保存退出。</p>
<p>再执行一下 <code>git status</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">AM README</span><br><span class="line">A  hello.py</span><br></pre></td></tr></table></figure>

<p><code>AM</code> 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们再执行 <code>git add</code> 命令将其添加到缓存中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.py</span><br></pre></td></tr></table></figure>

<p>当你将你的修改包含在即将提交的快照里的时候，需要执行 <code>git add</code></p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p><code>git status</code> 以查看在你上次提交之后是否有修改。</p>
<p>上例演示该命令的时候加了 <code>-s</code> 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 取消 hello.py 的缓存，以便查看两个文件不同的提示</span><br><span class="line">$ git reset HEAD -- hello.py</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   README</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        hello.py</span><br></pre></td></tr></table></figure>



<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>执行 <code>git diff</code> 来查看执行 <code>git status</code> 的结果的详细信息。</p>
<p><code>git diff</code> 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。<code>git diff</code> 有两个主要的应用场景。</p>
<ul>
<li>尚未缓存的改动：<code>git diff</code></li>
<li>查看已缓存的改动：<code>git dif  --cached</code></li>
<li>查看已缓存的与未缓存的所有改动：<code>git diff HEAD</code></li>
<li>显示摘要而非整个 diff：<code>git diff --stat</code></li>
</ul>
<p>修改 `README’ 后执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a&#x2F;README b&#x2F;README</span><br><span class="line">index 5bd35b1..72ca035 100644</span><br><span class="line">--- a&#x2F;README</span><br><span class="line">+++ b&#x2F;README</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> This is a test file</span><br><span class="line"> use before look at this.</span><br><span class="line">+However it is not any useful.</span><br></pre></td></tr></table></figure>

<p>接下来我们来查看下 <code>git diff --cached</code> 的执行效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a&#x2F;README b&#x2F;README</span><br><span class="line">index 5bd35b1..72ca035 100644</span><br><span class="line">--- a&#x2F;README</span><br><span class="line">+++ b&#x2F;README</span><br><span class="line">@@ -1,2 +1,3 @@</span><br><span class="line"> This is a test file</span><br><span class="line"> use before look at this.</span><br><span class="line">+However it is not any useful.</span><br><span class="line">cj@DESKTOP-O39JCF4:~&#x2F;guluding$ git diff --cached</span><br><span class="line">diff --git a&#x2F;README b&#x2F;README</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..5bd35b1</span><br><span class="line">--- &#x2F;dev&#x2F;null</span><br><span class="line">+++ b&#x2F;README</span><br><span class="line">@@ -0,0 +1,2 @@</span><br><span class="line">+This is a test file</span><br><span class="line">+use before look at this.</span><br><span class="line">diff --git a&#x2F;hello.py b&#x2F;hello.py</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..96e1727</span><br><span class="line">--- &#x2F;dev&#x2F;null</span><br><span class="line">+++ b&#x2F;hello.py</span><br><span class="line">@@ -0,0 +1,2 @@</span><br><span class="line">+print(&#39;Hello World&#39;)</span><br><span class="line">+</span><br></pre></td></tr></table></figure>



<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>使用 <code>git add</code> 命令将想要快照的内容写入缓存区，而执行 <code>git commit</code> 将缓存区内容添加到仓库中。</p>
<p>Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &#39;username&#39;</span><br><span class="line">$ git config --global user.email &#39;youremail&#39;</span><br></pre></td></tr></table></figure>

<p>接下来我们提交，我们使用 <code>-m</code> 选项以在命令行中提交注释。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -m &#39;First commit&#39;</span><br><span class="line">[master (root-commit) 5aa5775] First commit</span><br><span class="line"> 2 files changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"> create mode 100644 hello.py</span><br></pre></td></tr></table></figure>

<p>现在我们已经记录了快照。如果我们再执行 <code>git status</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>以上输出说明我们在最近一提交之后，没有做任何改改，是一个 <code>working directory clean: 干净的工作目录</code>。</p>
<p>如果你觉得 <code>git add</code> 提交缓存的流程太过繁琐，Git 也允许你用 <code>-a</code> 选项路过这一步。命令格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git commit -am &#39;修改 hell.py 文件&#39;</span><br><span class="line">[master c349302] 修改 hell.py 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>



<h3 id="git-reset-HEAD"><a href="#git-reset-HEAD" class="headerlink" title="git reset HEAD"></a>git reset HEAD</h3><p><code>git reset HEAD</code> 命令用于取消已缓存的内容。</p>
<p>我们先将 README 和 hello.py 做任意修改：</p>
<p>现在两个文件修改后，都提交到缓存区，我们取消其中一个缓存，操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">AM README</span><br><span class="line">AM hello.py</span><br><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.py</span><br><span class="line">$ git reset HEAD -- hello.py</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">?? hello.py</span><br></pre></td></tr></table></figure>

<p>简而言之，执行 <code>git reset HEAD -- &lt;file&gt;</code> 取消之前 <code>git add </code> 添加，但不希望包含在下一提交快照中的缓存。</p>
<h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 <code>changes not staged for commit</code> 的提示。</p>
<p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <code>-f</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm -f &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>如果把文件从暂存区域移除，但仍希望保留在当前工作目录中，换句话说，公是从跟踪清单中删除，使用 <code>--cached</code> 选项即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm -r *</span><br></pre></td></tr></table></figure>



<h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><p><code>git mv</code> 命令用于移动或重命名一个文件、目录、软连接。</p>
<p>我们将 README 重名为 README.md：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git mv README README.md</span><br></pre></td></tr></table></figure>

<h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><p><img src="https://github.com/guluding/Images/blob/master/git_base.jpg?raw=true"></p>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到 <code>git clone</code> 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone &lt;url&gt;</span><br></pre></td></tr></table></figure>

<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为 <code>git clone</code> 命令的第二个参数.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone &lt;url&gt; [&lt;dir&gt;]</span><br></pre></td></tr></table></figure>

<p> <code>git clone</code> 支持多种协议，除了 <strong>http(s)</strong> 以外，还支持 <strong>ssh、git、本地文件协议等</strong>，通常来说， git 协议下载速度最快，ssh 协议用于需要用户认证的场合</p>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>为了方便管理，Git 要求每个远程不知主机都必须指定一个主机名。<code>git remote</code> 命令就用于管理主机名。</p>
<p>不带选项的时候，<code>git remote</code> 命令列出所有远程主机。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure>

<p>使用 <code>-v</code> 选项，可以参看远程的网址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:username&#x2F;repository.git (fetch)</span><br><span class="line">origin  git@github.com:username&#x2F;repository.git (push)</span><br></pre></td></tr></table></figure>

<p>上面命令表示，当前只有一台远程主机，叫做 <code>origin</code>，以及它的网址</p>
<p>克隆版本库的时候，所使用的远程主机自动被 Git 命名为 <code>origin</code> 。如果想用其它的主机名，需要用 <code>git clone</code> 命令的 <code>-o</code> 选项指定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -o jQuery https:&#x2F;&#x2F;github.com&#x2F;jquery&#x2F;jquery.git</span><br><span class="line">$ git remote</span><br><span class="line">jQuery</span><br></pre></td></tr></table></figure>

<p>上面命令表示，克隆的时候，指定远程主机叫做 jQuery</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 加上主机名，可以查看该主机的详细信息。</span><br><span class="line">$ git remote show &lt;主机名&gt;</span><br><span class="line"></span><br><span class="line"># 添加远程主机</span><br><span class="line">$ git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class="line"></span><br><span class="line"># 删除远程主机</span><br><span class="line">$ git remote rm &lt;主机名&gt;</span><br><span class="line"></span><br><span class="line"># 远程主机的改名</span><br><span class="line">$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure>



<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><p>一旦远程主机的版本有了更新(Git 术语叫做 commit)，需要将这些取回本地，这时就要用到 <code>git fetch</code> 命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git fetch &lt;远程主机名&gt;</span><br></pre></td></tr></table></figure>

<p>上面命令将某个远程主机的更新，全部取回本地。</p>
<p><code>git fetch</code> 命令通常用来查看其它人的进程，因为它取回的代码对你本地的开发代码没有影响。</p>
<p>默认情况下，<code>git fetch</code> 取回所有分支的更新。如果只想取回特定分支的更新，可以指定分支名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如 <code>origin</code> 主机的 <code>master</code> ，就要用 <code>origin/master</code> 读取。</p>
<p><code>git branch</code> 命令的 <code>-r</code> 选项，可以用来查看远程分支，<code>-a</code> 选项查看所有分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -r</span><br><span class="line">origin&#x2F;master</span><br><span class="line"></span><br><span class="line">$ git branch -a</span><br><span class="line">* master</span><br><span class="line">  remotes&#x2F;origin&#x2F;master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，本地主机的当前分支是 <code>master</code> ，远程分支是 <code>origin/master</code></p>
<p>取回远程主机的更新以后，可以在它的基础上，使用 <code>git checkout</code> 命令创建一个新的分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -b newBrach origin&#x2F;master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，在 <code>origin/master</code> 的基础上，创建一个新分支。</p>
<p>此外，也可以使用 <code>git merge</code> 命令或者 <code>git rebase</code> 命令，在本地分支上合并远程分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge origin&#x2F;master</span><br><span class="line"># 或者</span><br><span class="line">$ git rebase origin&#x2F;master</span><br></pre></td></tr></table></figure>

<p>上面命令表示在当前分支上，合并 <code>origin/master</code> 。</p>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p><code>git pull</code> 命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>比如，取回 <code>origin</code> 主机的 <code>next</code> 分支，与本地的 <code>master</code> 分支合并，需要写成下面这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull origin next:master</span><br></pre></td></tr></table></figure>

<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull origin next</span><br></pre></td></tr></table></figure>

<p>上面命令表示，取回 <code>origin/next</code> 分支，再与当前分支合并。实质上，这等同于先做 <code>git fetch</code>  ，再做 <code>git merge</code> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">$ git merge origin&#x2F;next</span><br></pre></td></tr></table></figure>

<p>在某些场合，Git 会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。</p>
<p>比如，在 <code>git clone</code> 的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的 <code>master</code> 分支自动”追踪” <code>origin/master</code> 分支。</p>
<p>Git 也允许手动建立追踪关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch --set-upstream master origin&#x2F;next</span><br></pre></td></tr></table></figure>

<p>上面命令指定 <code>master</code> 分支追踪 <code>origin/next</code> 分支。</p>
<p>如果当前分支与远程分支存在追踪关系，<code>git pull</code> 就可以省略远程分支名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，本地的当前分支自动与对应的 <code>origin</code> 主机”追踪分支”(remote-tracking branch)进行合并。</p>
<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p>
<p>如果合作需要采用 rebase 模式，可以使用 <code>--rebase</code> 选项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>

<p>如果远程主机删除了某个分支，默认情况下，<code>git pull</code> 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致 <code>git pull</code> 不知不觉删除了本地分支。</p>
<p>但是，你可以改变这个行为，加上参数 <code>-p</code> 就会在本地删除远程已经删除的分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git pull -p</span><br><span class="line"># 等同于下面的命令</span><br><span class="line">$ git fetch --prune origin </span><br><span class="line">$ git fetch -p</span><br></pre></td></tr></table></figure>



<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p><code>git push</code> 命令用于将本地分支的更新，推送到远程主机。它的格式与 <code>git pull</code> 命令相仿。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>

<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以 <code>git pull</code> 是&lt;远程分支&gt;:&lt;本地分支&gt;，而 <code>git push</code> 是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>
<p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将本地的 <code>master</code> 分支推送到 <code>origin</code> 主机的 <code>master</code> 分支。如果后者不存在，则会被新建</p>
<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin :master</span><br><span class="line"># 等同于</span><br><span class="line">$ git push origin --delete master</span><br></pre></td></tr></table></figure>

<p>上面命令表示删除 <code>origin</code> 主机的 <code>master</code> 分支。</p>
<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将当前分支推送到 <code>origin</code> 主机的对应分支。</p>
<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure>

<p>如果当前分支与多个主机存在追踪关系，则可以使用 <code>-u</code> 选项指定一个默认主机，这样后面就可以不加任何参数使用 <code>git push</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>上面命令将本地的 <code>master</code> 分支推送到 <code>origin</code> 主机，同时指定 <code>origin</code> 为默认主机，后面就可以不加任何参数使用 <code>git push</code> 了。</p>
<p>不带任何参数的 <code>git push</code>，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会摄像头所有有对应的远程分支的本地分支。 Git 2.0 版本之前，默认采用 matching 方法，现在改为默认采用 simple 方式。如果要修改这个设置，可以采用 <code>git config</code> 命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global push.default matching</span><br><span class="line"># 或者</span><br><span class="line">$ git config --global push.default simple</span><br></pre></td></tr></table></figure>

<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 <code>--all</code> 选项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push --all origin</span><br></pre></td></tr></table></figure>

<p>上面命令表示，将所有本地分支都推送到 <code>origin</code> 主机。</p>
<p>如果远程主机的版本比本地版本更新，推送时 Git 会报错，要求先在本地做 <code>git pull</code> 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 <code>--force</code> 选项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push --force origin</span><br></pre></td></tr></table></figure>

<p>上面命令使用 <code>--force</code> 选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用 <code>--force</code> 选项。</p>
<p>最后，<code>git push</code> 不会推送标签(tag)，除非使用 <code>--tags</code> 选项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp; git push origin --tags</span><br></pre></td></tr></table></figure>



<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p>阮一峰博客： <a href="https://www.ruanyifeng.com/blog/2014/06/git_remote.html">https://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></p>
<p>廖雪峰的官方网站：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>
<p>菜鸟教程：<a href="https://www.runoob.com/git/git-tutorial.html">https://www.runoob.com/git/git-tutorial.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2000/07/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>python的mysql基本用法</title>
    <url>/2021/05/13/python-mysql/</url>
    <content><![CDATA[<h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p><code>autocommit=True</code>相当于每次执行 <code>db.commit()</code></p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    passwd=<span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">    autocommit=<span class="literal">True</span>,</span><br><span class="line">    database=<span class="string">&#x27;test&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mycursor = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查数据库是否存在</span></span><br><span class="line">mycursor.execute(<span class="string">&quot;SHOW DATABASES&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mycursor:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>



<h2 id="创建表-CREATE"><a href="#创建表-CREATE" class="headerlink" title="创建表(CREATE)"></a>创建表(CREATE)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;&quot;&quot;CREATE TABLE table_name(</span></span><br><span class="line"><span class="string">      id INT AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="string">      name VARCHAR(20),</span></span><br><span class="line"><span class="string">      sex VARCHAR(4),</span></span><br><span class="line"><span class="string">      age INT(4),</span></span><br><span class="line"><span class="string">      adress VARCHAR(255)</span></span><br><span class="line"><span class="string">      )DEFAULT CHARSET=utf8&quot;&quot;&quot;</span></span><br><span class="line">      </span><br><span class="line">mycursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查表是否存在</span></span><br><span class="line">mycursor.execute(<span class="string">&quot;SHOW TABLES&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mycursor:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<h3 id="修改选项语法"><a href="#修改选项语法" class="headerlink" title="修改选项语法"></a>修改选项语法</h3><p><code>ALTER TABLE</code>  语句可以改变原有表的结构，例如增加或删减列、更改原有列类型、重新命名列或表等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在已有的表上添加主键</span><br><span class="line">mycursor.execute(&quot;ALTER TABLE table_name ADD COLUMN(phone INT(10))&quot;)</span><br><span class="line"># 修改表已有列名</span><br><span class="line">mycursor.execute(&quot;ALTER TABLE table_name MODIFY COLUMN(phone INT(11))&quot;)</span><br><span class="line"># 删除表已有列名</span><br><span class="line">mycursor.execute(&quot;ALTER TABLE table_name DROP COLUMN phone&quot;)</span><br><span class="line"># 表重命名</span><br><span class="line">mycursor.execute(&quot;ALTER TABLE table_name RENAME TO table1&quot;)</span><br></pre></td></tr></table></figure>

<p><code>DEFAULT CHARSET=utf8</code> 设置 <code>utf8</code> 编码以免出现中文乱码</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>规定了列可容纳何种数据类型（data_type）。下面的表格包含了<code>SQL</code>中最常用的数据类型：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>integer(size)<br>int(size)<br>smallint(size)<br>tinyint(size)</td>
<td>仅容纳整数。<br>在括号内规定数字的最大位数</td>
</tr>
<tr>
<td>decimal(size,d)<br>numeric(size,d)</td>
<td>容纳带有小数的数字。<br>“size”规定数字的最大位数，”d”规定小数点右侧的最大位数。</td>
</tr>
<tr>
<td>char(size)</td>
<td>容纳固定长度的字符串(可容纳字母、数字以及特殊字符)。<br>在括号中规定字符串的最大长度</td>
</tr>
<tr>
<td>varchar(size)</td>
<td>容纳可变长度的字符串(可容纳字母、数字以及特殊字符)。<br>在括号中规定字符串的最大长度。</td>
</tr>
<tr>
<td>date(yyyymmdd)</td>
<td>容纳日期</td>
</tr>
</tbody></table>
<h2 id="插入表-INSERT"><a href="#插入表-INSERT" class="headerlink" title="插入表(INSERT)"></a>插入表(INSERT)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;INSERT INTO table_name (name, sex, age, adress, phone) VALUES (%s, %s, %s, %s, %s)&quot;</span></span><br><span class="line">val = (<span class="string">&#x27;小帅&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;北京市朝阳区&#x27;</span>, <span class="string">&#x27;13854385438&#x27;</span>)</span><br><span class="line">mycursor.execute(sql, val)</span><br></pre></td></tr></table></figure>

<h3 id="插入多行"><a href="#插入多行" class="headerlink" title="插入多行"></a>插入多行</h3><p>要在表中插入多行，请使用 <code>executemany()</code> 方法。</p>
<p><code>executemany()</code> 方法的第二个参数是元组列表，包含要插入的数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;INSERT INTO table_name (name, sex, age, adress, phone) VALUES (%s, %s, %s, %s, %s)&quot;</span></span><br><span class="line">val = [</span><br><span class="line">    (<span class="string">&#x27;小美&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;上海市虹桥区&#x27;</span>, <span class="string">&#x27;12555555555&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;成都市双流区&#x27;</span>, <span class="string">&#x27;18756548875&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;张大&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;上海市虹桥区&#x27;</span>, <span class="string">&#x27;13965456654&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;小樱&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;重庆市XX路&#x27;</span>, <span class="string">&#x27;188654578852&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;小美&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;上海市虹桥区&#x27;</span>, <span class="string">&#x27;12555555555&#x27;</span>)</span><br><span class="line">]</span><br><span class="line">mycursor.executemany(sql, val)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最后插入的一行: &#123;&#125;&#x27;</span>.fromat(mycursor.lastrowid))</span><br></pre></td></tr></table></figure>

<p>您可以通过询问 <code>mycursor.lastrowid</code> 对象来获取刚插入的行的 id。</p>
<p><strong>注释：</strong>如果插入不止一行，则返回最后插入行的 id。</p>
<h2 id="选择表内容-SELECT"><a href="#选择表内容-SELECT" class="headerlink" title="选择表内容(SELECT)"></a>选择表内容(<code>SELECT</code>)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mycursor.execute(<span class="string">&quot;SELECT * FROM table_name &quot;</span>)</span><br><span class="line">result = mycursor.fetchall()</span><br></pre></td></tr></table></figure>

<h3 id="选取指定内容"><a href="#选取指定内容" class="headerlink" title="选取指定内容"></a>选取指定内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mycursor.execute(<span class="string">&quot;SELECT name, adress FROM table_name &quot;</span>)</span><br><span class="line">result = mycursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回结果的第一行</span></span><br><span class="line">mycursor.execute(<span class="string">&quot;SELECT * FROM table_name&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(mycursor.fetchone())</span><br></pre></td></tr></table></figure>

<h2 id="筛选器选取-WHERE"><a href="#筛选器选取-WHERE" class="headerlink" title="筛选器选取(WHERE)"></a>筛选器选取(<code>WHERE</code>)</h2><p>选择地址为 “上海市虹桥区” 的记录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;SELECT * FROM table_name WHERE adress =&#x27;上海市虹桥区&#x27;&quot;</span></span><br><span class="line">mycursor.execute(sql)</span><br><span class="line">result = mycursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符(%)"></a>通配符(<code>%</code>)</h3><p>您也可以选择以给定字母或短语开头、包含或结束的记录。</p>
<p>请使用 <code>％</code> 表示通配符：</p>
<p>选择以 “区” 结尾的地区</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;SELECT * FROM table_name WHERE adress LIKE &#x27;%区&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line">mycursor.execute(sql)</span><br><span class="line">myresult = mycursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myresult:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<h2 id="结果排序-ORDER-BY"><a href="#结果排序-ORDER-BY" class="headerlink" title="结果排序(ORDER BY)"></a>结果排序(<code>ORDER BY</code>)</h2><p><code>ORDER BY</code> 关键字默认按升序对结果进行排序。若要按降序对结果进行排序，请使用 <code>DESC</code> 关键字。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;SELECT * FROM table_name ORDER BY age&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DESC 关键字按降序对结果进行排序</span></span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM table_name ORDER BY age DESC&quot;</span></span><br><span class="line"></span><br><span class="line">mycursor.execute(sql)</span><br><span class="line">myresult = mycursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myresult:</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<h2 id="删除记录-DELETE"><a href="#删除记录-DELETE" class="headerlink" title="删除记录(DELETE)"></a>删除记录(<code>DELETE</code>)</h2><p>请注意 DELETE 语法中的 WHERE 子句：WHERE 子句指定应删除哪些记录。如果省略 WHERE 子句，则将删除所有记录！</p>
<p>删除姓名 “有容” 的列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;DELETE FROM table_name WHERE name = &#x27;有容&#x27;&quot;</span></span><br><span class="line">mycursor.execute(sql)</span><br></pre></td></tr></table></figure>

<h2 id="删除表-DROP-TABLE"><a href="#删除表-DROP-TABLE" class="headerlink" title="删除表(DROP TABLE)"></a>删除表(<code>DROP TABLE</code>)</h2><p>删除 “table_name” 表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;DROP TABLE table_name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要删除的表已被删除，或者由于任何其他原因不存在，那么可以使用 IF EXISTS 关键字以避免出错</span></span><br><span class="line">sql = <span class="string">&quot;DROP TABLE IF EXISTS table_name&quot;</span></span><br><span class="line"></span><br><span class="line">mycursor.execute(sql)</span><br></pre></td></tr></table></figure>

<h2 id="更新表-UPDATE"><a href="#更新表-UPDATE" class="headerlink" title="更新表(UPDATE)"></a>更新表(<code>UPDATE</code>)</h2><p>把地址列中的 “上海市虹桥区” 覆盖为 “上海市黄浦区”：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sql = <span class="string">&quot;UPDATE table_name SET adress = &#x27;上海市黄浦区&#x27; WHERE adress = &#x27;上海市虹桥区&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line">mycursor.execute(sql)</span><br></pre></td></tr></table></figure>

<h2 id="限制查询返回记录数-LIMIT"><a href="#限制查询返回记录数-LIMIT" class="headerlink" title="限制查询返回记录数(LIMIT)"></a>限制查询返回记录数(<code>LIMIT</code>)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mycursor.execute(<span class="string">&quot;SELECT * FROM table_name LIMIT 5&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从位置 2 开始返回 2 条记录</span></span><br><span class="line">mycursor.execute(<span class="string">&quot;SELECT * FROM table_name LIMIT 2 OFFSET 2&quot;</span>)</span><br><span class="line"></span><br><span class="line">myresult = mycursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myresult:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<h2 id="防止-SQL-注入"><a href="#防止-SQL-注入" class="headerlink" title="防止 SQL 注入"></a>防止 <code>SQL</code> 注入</h2><p>当用户提供查询值时，您应该转义这些值。</p>
<p>此举是为了防止 <code>SQL</code> 注入，这是一种常见的网络黑客技术，可以破坏或滥用您的数据库。</p>
<p><code>mysql.connector</code> 模块拥有转义查询值的方法：</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用占位符 ％s 方法来转义查询值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># where 筛选</span></span><br><span class="line">sql = <span class="string">&quot;SELECT * FROM table_name WHERE adress = %s&quot;</span></span><br><span class="line">adr = (<span class="string">&#x27;上海市虹桥区&#x27;</span>, )</span><br><span class="line">mycursor.execute(sql, adr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete 删除记录</span></span><br><span class="line">sql = <span class="string">&quot;DELETE FROM table_name WHERE name = %s&quot;</span></span><br><span class="line">name = (<span class="string">&#x27;有容&#x27;</span>,)</span><br><span class="line">mycursor.execute(sql, name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update 更新记录</span></span><br><span class="line">sql = <span class="string">&quot;UPDATE table_name SET adress = %s WHERE adress = %s&quot;</span></span><br><span class="line">val = (<span class="string">&#x27;上海市黄浦区&#x27;</span>, <span class="string">&#x27;上海市虹桥区&#x27;</span>)</span><br><span class="line">mycursor.execute(sql, val)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
